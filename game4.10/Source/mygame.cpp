
#include "stdafx.h"
#include "Resource.h"
#include <mmsystem.h>
#include <ddraw.h>
#include <time.h>
#include "audio.h"
#include "gamelib.h"
#include "mygame.h"

namespace game_framework {
/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲開頭畫面物件
/////////////////////////////////////////////////////////////////////////////

CGameStateInit::CGameStateInit(CGame* g)
    : CGameState(g) {
}

void CGameStateInit::OnInit() {
    ShowInitProgress(0);	// 一開始的loading進度為0%
    //
    // 開始載入資料
    //
    //logo.LoadBitmap(IDB_BACKGROUND);
    typing_logo.LoadBitmap("Bitmaps/start_logo.bmp", RGB(0, 255, 0));
    text1.LoadBitmap("Bitmaps/text1_start.bmp", RGB(0, 255, 0));
    //
    // 此OnInit動作會接到CGameStaterRun::OnInit()，所以進度還沒到100%
    //
}

void CGameStateInit::OnBeginState() {
}

void CGameStateInit::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags) {
    const char KEY_ESC = 27;
    const char KEY_SPACE = ' ';

    if (nChar == KEY_SPACE)
        GotoGameState(GAME_STATE_RUN);						// 切換至GAME_STATE_RUN
    else if (nChar == KEY_ESC)								// Demo 關閉遊戲的方法
        PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE, 0, 0);	// 關閉遊戲
}

void CGameStateInit::OnLButtonDown(UINT nFlags, CPoint point) {
    GotoGameState(GAME_STATE_RUN);		// 切換至GAME_STATE_RUN
}

void CGameStateInit::OnShow() {
    //
    // 貼上logo
    //
    //logo.SetTopLeft((SIZE_X - logo.Width()) / 2, SIZE_Y / 8);
    //logo.ShowBitmap();
    typing_logo.SetTopLeft((SIZE_X - typing_logo.Width()) / 2, 40);
    typing_logo.ShowBitmap();
    text1.SetTopLeft((SIZE_X - text1.Width()) / 2, 300);
    text1.ShowBitmap();
    //
    // Demo螢幕字型的使用，不過開發時請盡量避免直接使用字型，改用CMovingBitmap比較好
    //
    CDC* pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC
    CFont f, *fp;
    f.CreatePointFont(160, "Consolas");	// 產生 font f; 160表示16 point的字
    fp = pDC->SelectObject(&f);					// 選用 font f
    pDC->SetBkColor(RGB(0, 0, 0));
    pDC->SetBkMode(TRANSPARENT);
    pDC->SetTextColor(RGB(41, 171, 226));
    //pDC->TextOut(180, 350, "Huang Xingqiao / Yu kaici");  //test text

    if (ENABLE_GAME_PAUSE)
        pDC->TextOut(5, 425, "Press Ctrl-Q to pause the Game.");

    pDC->TextOut(5, 455, "Press Alt-F4 or ESC to Quit.");
    ////
    pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
    CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的結束狀態(Game Over)
/////////////////////////////////////////////////////////////////////////////

CGameStateOver::CGameStateOver(CGame* g)
    : CGameState(g) {
}

void CGameStateOver::OnMove() {
    counter--;

    if (counter < 0)
        GotoGameState(GAME_STATE_INIT);
}

void CGameStateOver::OnBeginState() {
    counter = 30 * 5; // 5 seconds
}

void CGameStateOver::OnInit() {
    //
    // 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
    //     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
    //
    ShowInitProgress(66);	// 接個前一個狀態的進度，此處進度視為66%
    //
    // 開始載入資料
    //
    Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
    //
    // 最終進度為100%
    //
    ShowInitProgress(100);
}

void CGameStateOver::OnShow() {
    CDC* pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC
    CFont f, *fp;
    f.CreatePointFont(160, "Times New Roman");	// 產生 font f; 160表示16 point的字
    fp = pDC->SelectObject(&f);					// 選用 font f
    pDC->SetBkColor(RGB(0, 0, 0));
    pDC->SetTextColor(RGB(255, 255, 0));
    char str[80];								// Demo 數字對字串的轉換
    sprintf(str, "你 死 了 ! (%d)", counter / 30);
    pDC->TextOut(240, 210, str);
    //	顯示分數 (not done)
    // char scoreChr[80];
    // sprintf(str, "SCORE: %d", score);
    pDC->TextOut(240, 250, str);
    //
    pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
    CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲執行物件，主要的遊戲程式都在這裡
/////////////////////////////////////////////////////////////////////////////

CGameStateRun::CGameStateRun(CGame* g)
    : CGameState(g), NUMBALLS(28), LEVEL(10) {
    srand((unsigned)time(NULL));
    ball = new CBall[NUMBALLS];
    picX = picY = 0;
    enemy1 = new CEnemy[20];
    ///////
    counter = maxCounter = 40;
    currEnemy = 0;
    lock = 0;
    currLevel = 0;
}

CGameStateRun::~CGameStateRun() {
    delete[] ball;
    ////////
    delete[] enemy1;
}

void CGameStateRun::OnBeginState() {
    const int BALL_GAP = 90;
    const int BALL_XY_OFFSET = 45;
    const int BALL_PER_ROW = 7;
    const int HITS_LEFT = 10;
    const int HITS_LEFT_X = 590;
    const int HITS_LEFT_Y = 0;
    const int BACKGROUND_X = 60;
    const int ANIMATION_SPEED = 15;

    for (int i = 0; i < NUMBALLS; i++) {				// 設定球的起始座標
        int x_pos = i % BALL_PER_ROW;
        int y_pos = i / BALL_PER_ROW;
        ball[i].SetXY(x_pos * BALL_GAP + BALL_XY_OFFSET, y_pos * BALL_GAP + BALL_XY_OFFSET);
        ball[i].SetDelay(x_pos);
        ball[i].SetIsAlive(true);
    }

    eraser.Initialize();
    //background.SetTopLeft(BACKGROUND_X, 0);				// 設定背景的起始座標
    help.SetTopLeft(0, SIZE_Y - help.Height());			// 設定說明圖的起始座標
    //hits_left.SetInteger(HITS_LEFT);					// 指定剩下的撞擊數
    //hits_left.SetTopLeft(HITS_LEFT_X, HITS_LEFT_Y);		// 指定剩下撞擊數的座標
    //CAudio::Instance()->Play(AUDIO_LAKE, true);			// 撥放 WAVE
    //CAudio::Instance()->Play(AUDIO_DING, false);		// 撥放 WAVE
    //CAudio::Instance()->Play(AUDIO_NTUT, true);			// 撥放 MIDI

    /////// SET Eneny's 初始值

    for (int i = 0; i < levelEnemyNum[currLevel]; i++) {
        enemy1[i].SetXY(i * 50, 0);
        enemy1[i].SetDelay(10);
        enemy1[i].SetIsAlive(false);
    }

    score.SetInteger(0);			//設定SCORE為0;
    score.SetTopLeft(HITS_LEFT_X, HITS_LEFT_Y);
}

void CGameStateRun::OnMove() {						// 移動遊戲元素
    //
    // 如果希望修改cursor的樣式，則將下面程式的commment取消即可
    //
    //SetCursor(AfxGetApp()->LoadCursor(IDC_GAMECURSOR));
    //
    // 移動背景圖的座標
    //
    /*
    if (background.Top() > SIZE_Y)  // 當資訊工程系掉落到底部後 回到上面
    	background.SetTopLeft(60, -background.Height());

    background.SetTopLeft(background.Left(), background.Top() + 1);
    */
    //
    // 移動球
    //
    int i;

    for (i = 0; i < NUMBALLS; i++)
        ball[i].OnMove();

    ////////////

    if (picX <= SIZE_Y) {
        picX += 5;
        picY += 5;
    }
    else {
        picX = picY = 0;
    }

    ////////
    counter--;	//每隻怪物 生成間隔 之 counter (50~0)

    if (counter < 0 && currEnemy < levelEnemyNum[currLevel]) {	// counter 數到0後就開始召喚新怪
        counter = maxCounter;									// 把counter 調回max繼續數
        int randX = (rand() % (SIZE_X - 100)) ;					// SIZE_X - 100 為了不讓怪物的單字超出螢幕太多
        enemy1[currEnemy].SetXY(randX, 0);
        enemy1[currEnemy].SetDelay(10);							// 從0數到這個數字才會動
        ////
        bool firstWordBounceFlag = 0;

        while (1) {
            for (int i = currEnemy - 1; i >= 0 ; i--) {
                if (enemy1[currEnemy].GetFirstWord() == enemy1[i].GetFirstWord())
                    firstWordBounceFlag = 1;
            }

            break;
            //if (firstWordBounceFlag == 1) enemy1[currEnemy].SetVocab();
            //else break;
        }

        enemy1[currEnemy].SetIsAlive(true);
        currEnemy++;
    }

    for (int i = 0; i < levelEnemyNum[currLevel]; i++)
        enemy1[i].OnMove();

    /////////////
    //
    // 移動擦子
    //
    eraser.OnMove();

    //
    // 判斷擦子是否碰到球
    //
    for (i = 0; i < NUMBALLS; i++)
        if (ball[i].IsAlive() && ball[i].HitEraser(&eraser)) {
            ball[i].SetIsAlive(false);
            CAudio::Instance()->Play(AUDIO_DING);
            hits_left.Add(-1);

            //
            // 若剩餘碰撞次數為0，則跳到Game Over狀態
            //
            if (hits_left.GetInteger() <= 0) {
                CAudio::Instance()->Stop(AUDIO_LAKE);	// 停止 WAVE
                CAudio::Instance()->Stop(AUDIO_NTUT);	// 停止 MIDI
                GotoGameState(GAME_STATE_OVER);
            }
        }

    //
    // 移動彈跳的球
    //
    bball.OnMove();
}

void CGameStateRun::OnInit() {								// 遊戲的初值及圖形設定
    //
    // 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
    //     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
    //
    ShowInitProgress(33);	// 接個前一個狀態的進度，此處進度視為33%
    //
    // 開始載入資料
    //

    for (int i = 0; i < NUMBALLS; i++)
        ball[i].LoadBitmap();								// 載入第i個球的圖形

    ////////
    for (int i = 0; i < levelEnemyNum[currLevel]; i++)
        enemy1[i].LoadBitmap();

    ////////
    eraser.LoadBitmap();
    //background.LoadBitmap(IDB_BACKGROUND);					// 載入背景的圖形
    //
    // 完成部分Loading動作，提高進度
    //
    ShowInitProgress(50);
    Sleep(0); // 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
    //
    // 繼續載入其他資料
    //
    help.LoadBitmap(IDB_HELP, RGB(255, 255, 255));				// 載入說明的圖形
    corner.LoadBitmap(IDB_CORNER);							// 載入角落圖形
    //corner.ShowBitmap(background);							// 將corner貼到background
    bball.LoadBitmap();										// 載入圖形
    //hits_left.LoadBitmap();
    score.LoadBitmap();
    CAudio::Instance()->Load(AUDIO_DING, "sounds\\ding.wav");	// 載入編號0的聲音ding.wav
    CAudio::Instance()->Load(AUDIO_LAKE, "sounds\\lake.mp3");	// 載入編號1的聲音lake.mp3
    CAudio::Instance()->Load(AUDIO_NTUT, "sounds\\ntut.mid");	// 載入編號2的聲音ntut.mid
    //
    // 此OnInit動作會接到CGameStaterOver::OnInit()，所以進度還沒到100%
    //
}
void CGameStateRun::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) {
    const char KEY_LEFT = 0x25; // keyboard左箭頭
    const char KEY_UP = 0x26; // keyboard上箭頭
    const char KEY_RIGHT = 0x27; // keyboard右箭頭
    const char KEY_DOWN = 0x28; // keyboard下箭頭

    for (int i = 0; i < levelEnemyNum[currLevel]; i++) {					//跑目前關卡怪物的數量
        if (enemy1[i].IsAlive()) {					//回傳當前怪物是否存在
            if (lock == false) {							//尚未鎖定了
                if (nChar + 32 == enemy1[i].GetFirstWord()) {		//若等於第一個字母:鎖住 and 目前字元位置+1
                    lock = true;
                    targetEnemy = &enemy1[i];      // targetEnemy為指標->正在攻擊的敵人
                    targetEnemy->AddCurrWordLeng();
                }
            }
            else {											//若已鎖定
                if (nChar + 32 == targetEnemy->GetVocab()[targetEnemy->GetCurrWordLeng()]) { 	//若等於當前字母
                    targetEnemy->AddCurrWordLeng();

                    if (targetEnemy->GetCurrWordLeng() == targetEnemy->GetVocabLeng()) { //若當前長度 等於 字母的長度
                        targetEnemy->SetIsAlive(false);// 成功殺害怪物
                        lock = false;
                        score.Add(targetEnemy->GetCurrWordLeng());
                    }
                }
            }
        }
        else {
            continue;
        }
    }

    /*
    if (nChar == KEY_LEFT)
        eraser.SetMovingLeft(true);

    if (nChar == KEY_RIGHT)
        eraser.SetMovingRight(true);

    if (nChar == KEY_UP)
        eraser.SetMovingUp(true);

    if (nChar == KEY_DOWN)
        eraser.SetMovingDown(true);
    */
}
void CGameStateRun::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags) {
    const char KEY_LEFT = 0x25; // keyboard左箭頭
    const char KEY_UP = 0x26; // keyboard上箭頭
    const char KEY_RIGHT = 0x27; // keyboard右箭頭
    const char KEY_DOWN = 0x28; // keyboard下箭頭

    if (nChar == KEY_LEFT)
        eraser.SetMovingLeft(false);

    if (nChar == KEY_RIGHT)
        eraser.SetMovingRight(false);

    if (nChar == KEY_UP)
        eraser.SetMovingUp(false);

    if (nChar == KEY_DOWN)
        eraser.SetMovingDown(false);
}
void CGameStateRun::OnLButtonDown(UINT nFlags, CPoint point) { // 處理滑鼠的動作
    eraser.SetMovingLeft(true);
}
void CGameStateRun::OnLButtonUp(UINT nFlags, CPoint point) {	// 處理滑鼠的動作
    eraser.SetMovingLeft(false);
}
void CGameStateRun::OnMouseMove(UINT nFlags, CPoint point) {	// 處理滑鼠的動作
    // 沒事。如果需要處理滑鼠移動的話，寫code在這裡
}
void CGameStateRun::OnRButtonDown(UINT nFlags, CPoint point) { // 處理滑鼠的動作
    eraser.SetMovingRight(true);
}
void CGameStateRun::OnRButtonUp(UINT nFlags, CPoint point) {	// 處理滑鼠的動作
    eraser.SetMovingRight(false);
}
void CGameStateRun::OnShow() {
    //
    //  注意：Show裡面千萬不要移動任何物件的座標，移動座標的工作應由Move做才對，
    //        否則當視窗重新繪圖時(OnDraw)，物件就會移動，看起來會很怪。換個術語
    //        說，Move負責MVC中的Model，Show負責View，而View不應更動Model。
    //
    //
    //  貼上背景圖、撞擊數、球、擦子、彈跳的球
    //
    //background.ShowBitmap();			// 貼上背景圖
    help.ShowBitmap();					// 貼上說明圖
    //hits_left.ShowBitmap();

    for (int i = 100; i < NUMBALLS; i++) // 暫時設定100
        ball[i].OnShow();				// 貼上第i號球(香菇)

    /////////

    for (int i = 0; i < levelEnemyNum[currLevel]; i++)
        enemy1[i].OnShow();

    score.ShowBitmap();
    /////////
    //bball.OnShow();						// 貼上彈跳的球
    eraser.OnShow();					// 貼上擦子
    //
    //  貼上左上及右下角落的圖
    //
    corner.SetTopLeft(0, 0);
    corner.ShowBitmap();
    corner.SetTopLeft(SIZE_X - corner.Width(), SIZE_Y - corner.Height());
    corner.ShowBitmap();
}
}
/*
發現的BUG :		1. 當有連續的單字(bee), 打到第二個e就會直接消失, 感覺是因為把程式寫在keydown的關係
*/